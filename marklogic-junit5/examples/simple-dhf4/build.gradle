plugins {
	id 'net.saliman.properties' version '1.4.6'
	id 'com.marklogic.ml-data-hub' version '4.2.2'
  id 'java'
}

repositories {
	jcenter()
  mavenLocal()
}

dependencies {
  mlRestApi "com.marklogic:marklogic-unit-test-modules:1.0.beta"

	testCompile "com.marklogic:marklogic-junit5:1.0.beta"
  testCompile "com.marklogic:marklogic-data-hub:4.2.2"

	// Needed by Gradle 4.6+
	testRuntime "org.junit.jupiter:junit-jupiter-engine:5.3.0"
}

// Needed by Gradle 4.6+ - see https://www.petrikainulainen.net/programming/testing/junit-5-tutorial-running-unit-tests-with-gradle/
test {
  useJUnitPlatform()
}


/**
 * Tasks for setting up a test database and a test app server that mirror either your final or staging database and
 * app server, and then loading hub and user modules via the test app server so that REST options are accessible to it.
 * Depends on the following properties being set:
 *
 * - mlTestDbFilename = the name of the file to use for constructing a database - either final-database.json or staging-database.json
 * - mlTestDbName = the name for the test database
 * - mlTestServerFilename = the name of the file to use for constructing an app server - either final-server.json or staging-server.json
 * - mlTestServerName = the name of the test app server
 * - mlTestPort = the port to assign to the test app server
 */

task hubDeployTestDatabase(type: com.marklogic.gradle.task.MarkLogicTask) {
  doLast {
    println "Deploying a test database with name ${mlTestDbName} based on configuration file named ${mlTestDbFilename}"
    new DeployHubTestDatabaseCommand(hubConfig, mlTestDbFilename, mlTestDbName).execute(mlCommandContext)
  }
}

task hubDeployTestServer(type: com.marklogic.gradle.task.MarkLogicTask) {
  doLast {
    println "Deploying a test server with name ${mlTestServerName} and port ${mlTestPort}, connected to content database ${mlTestDbName}, based on configuration file named ${mlTestServerFilename}"
    new DeployHubTestServerCommand(mlTestServerFilename, mlTestServerName, Integer.parseInt(mlTestPort), mlTestDbName).execute(mlCommandContext);
  }
}

task testDeploy {
  description = "Deploy a test database and a test server"
  dependsOn = ["hubDeployTestDatabase", "hubDeployTestServer"]
}
hubDeployTestServer.mustRunAfter hubDeployTestDatabase

task hubUndeployTestResources(type: com.marklogic.gradle.task.MarkLogicTask) {
  description = "Undeploys the test server and database that were created via testDeploy"
  doLast {
    mlAdminManager.invokeActionRequiringRestart({
      new com.marklogic.mgmt.resource.appservers.ServerManager(mlManageClient).deleteByIdField(mlTestServerName)
      return true
    })
    new com.marklogic.mgmt.resource.databases.DatabaseManager(mlManageClient).deleteByName(mlTestDbName)
  }
}
mlUndeploy.dependsOn hubUndeployTestResources

import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.node.ObjectNode
import com.fasterxml.jackson.databind.node.TextNode
import com.marklogic.hub.HubConfig

import java.util.regex.Pattern

class DeployHubTestDatabaseCommand extends com.marklogic.hub.deploy.commands.DeployHubDatabaseCommand {
  String testDatabaseName

  DeployHubTestDatabaseCommand(HubConfig config, String databaseFilename, String testDatabaseName) {
    super(config, null, databaseFilename)
    this.testDatabaseName = testDatabaseName
  }

  @Override
  protected String copyFileToString(File f) {
    String payload = super.copyFileToString(f)
    ObjectNode node = new ObjectMapper().readTree(payload)
    node.set("database-name", new TextNode(testDatabaseName))
    return node.toString()
  }
}

class DeployHubTestServerCommand extends com.marklogic.hub.deploy.commands.DeployHubOtherServersCommand {
  String serverName
  int port
  String contentDatabaseName

  DeployHubTestServerCommand(String serverFilenamePattern, String serverName, int port, String contentDatabaseName) {
    super()
    setResourceFilenamesIncludePattern(Pattern.compile(serverFilenamePattern))
    this.serverName = serverName
    this.port = port
    this.contentDatabaseName = contentDatabaseName
  }

  @Override
  protected String copyFileToString(File f) {
    String payload = super.copyFileToString(f)
    ObjectNode node = new ObjectMapper().readTree(payload)
    node.set("server-name", new TextNode(serverName))
    node.set("port", new TextNode(port + ""))
    node.set("content-database", new TextNode(contentDatabaseName))
    return node.toString()
  }
}

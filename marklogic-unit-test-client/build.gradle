plugins {
	id "java"
	id "maven-publish"
	id "com.jfrog.bintray" version "1.8.4"

	// ml-gradle is used for deploying a test application so that this project itself can be tested
	id "com.marklogic.ml-gradle" version "3.7.1"

	// Used to generate a license report
	id "com.github.jk1.dependency-license-report" version "1.3"
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

repositories {
	jcenter()
	mavenCentral()
}

dependencies {
	compile "com.marklogic:marklogic-client-api:4.2.0"

	testCompile "junit:junit:4+"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier "sources"
	from sourceSets.main.allJava
}

// Setup publishing of both a jar (containing the src/main/java code) and the modules zip
// Can eventually include a test jar (containing some src/test/java code) if desired
// Run "gradle publishtomavenlocal" to publish these locally
publishing {
	publications {
		mainJava(MavenPublication) {
			from components.java
			artifactId "marklogic-unit-test-client"
		}
		sourcesJava(MavenPublication) {
			from components.java
			artifactId "marklogic-unit-test-client"
			artifact sourcesJar
		}
	}
}

if (project.hasProperty("myBintrayUser")) {
	bintray {
		user = myBintrayUser
		key = myBintrayKey
		publications = ["mainJava", "sourcesJava"]
		pkg {
			repo = "Maven"
			name = project.name
			userOrg = 'marklogic-community'
			licenses = ["Apache-2.0"]
			vcsUrl = "https://github.com/marklogic-community/marklogic-unit-test.git"
			version {
				name = project.version
				released = new Date()
			}
		}
	}
}

task createHttpCredentials(type: com.marklogic.gradle.task.MarkLogicTask) {
  doLast {
    def client = getAppConfig().newAppServicesDatabaseClient("Security")
    String xquery = """
xquery version "1.0-ml";

import module namespace sec = "http://marklogic.com/xdmp/security"
      at "/MarkLogic/security.xqy";

declare option xdmp:mapping "false";

try {
  sec:remove-credential("marklogic-unit-test-credentials")
} catch (\$e) {()};

xquery version "1.0-ml";

import module namespace sec = "http://marklogic.com/xdmp/security"
      at "/MarkLogic/security.xqy";

declare option xdmp:mapping "false";

sec:create-credential(
   "marklogic-unit-test-credentials",
   "Credentials for ML Rest Helper Calls",
   "${mlUsername}",
   "${mlPassword}",
   (),
   (),
   fn:false(),
   sec:uri-credential-target("http://localhost:${mlRestPort}/.*","digest"),
   xdmp:default-permissions()
)
""";
    try {
      String result
      result = client.newServerEval().xquery(xquery).evalAs(String.class);
      if (result != null) {
        println result
      }
    } finally {
      client.release()
    }
  }
}

mlPostDeploy.dependsOn createHttpCredentials
tasks.test.dependsOn mlDeploy

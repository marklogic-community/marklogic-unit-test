plugins {
	// ml-gradle is used for deploying a test application so that this project itself can be tested
	id "com.marklogic.ml-gradle" version "4.2.1"

	// Used to generate a license report
	id "com.github.jk1.dependency-license-report" version "1.17"
}

dependencies {
	api "com.marklogic:marklogic-client-api:5.5.3"
  implementation "org.slf4j:slf4j-api:1.7.31"

  testImplementation "org.junit.jupiter:junit-jupiter:5.7.2"
}

test {
  useJUnitPlatform()
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier "javadoc"
  from javadoc
}

artifacts {
  archives javadocJar, sourcesJar
}
signing {
  sign configurations.archives
}

task generatePomForDependencyGraph(dependsOn: "generatePomFileForMainJavaPublication") {
  description = "Prepare for a release by making a copy of the generated pom file in the root directory so that it " +
    "can enable Github's Dependency Graph feature, which does not yet support Gradle"
  doLast {
    def preamble = '<?xml version="1.0" encoding="UTF-8"?>'
    def comment = "<!--\n" +
      "This file was generated via Gradle and is being used primarily for github's Dependency Graph feature.\n" +
      "It is not intended to be used to build this project.\n" +
      "-->"
    def fileText = file("build/publications/mainJava/pom-default.xml").getText()
    file("pom.xml").setText(fileText.replace(preamble, preamble + comment))
  }
}

publishing {
  publications {
    mainJava(MavenPublication) {
      pom {
        name = "${group}:${project.name}"
        description = "Supports testing MarkLogic applications"
        packaging = "jar"
        url = "https://github.com/marklogic-community/${project.name}"
        licenses {
          license {
            name = "The Apache License, Version 2.0"
            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
          }
        }
        developers {
          developer {
            id = "marklogic"
            name = "MarkLogic Github Contributors"
            email = "general@developer.marklogic.com"
            organization = "MarkLogic"
            organizationUrl = "https://www.marklogic.com"
          }
        }
        scm {
          url = "git@github.com:marklogic-community/${project.name}.git"
          connection = "scm:git@github.com:marklogic-community/${project.name}.git"
          developerConnection = "scm:git@github.com:marklogic-community/${project.name}.git"
        }
      }
      from components.java
      artifact sourcesJar
      artifact javadocJar
    }
  }
  repositories {
    maven {
      name = "central"
      url = mavenCentralUrl
      credentials {
        username mavenCentralUsername
        password mavenCentralPassword
      }
    }
  }
}

task createHttpCredentials(type: com.marklogic.gradle.task.MarkLogicTask) {
  doLast {
    def client = getAppConfig().newAppServicesDatabaseClient("Security")
    String xquery = """
xquery version "1.0-ml";

import module namespace sec = "http://marklogic.com/xdmp/security"
      at "/MarkLogic/security.xqy";

declare option xdmp:mapping "false";

try {
  sec:remove-credential("marklogic-unit-test-credentials")
} catch (\$e) {()};

xquery version "1.0-ml";

import module namespace sec = "http://marklogic.com/xdmp/security"
      at "/MarkLogic/security.xqy";

declare option xdmp:mapping "false";

sec:create-credential(
   "marklogic-unit-test-credentials",
   "Credentials for ML Rest Helper Calls",
   "${mlUsername}",
   "${mlPassword}",
   (),
   (),
   fn:false(),
   sec:uri-credential-target("http://localhost:${mlRestPort}/.*","digest"),
   xdmp:default-permissions()
)
""";
    try {
      String result
      result = client.newServerEval().xquery(xquery).evalAs(String.class);
      if (result != null) {
        println result
      }
    } finally {
      client.release()
    }
  }
}

mlPostDeploy.dependsOn createHttpCredentials
tasks.test.dependsOn mlDeploy
